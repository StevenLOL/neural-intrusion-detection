import pandas as pd
import numpy as np

import matplotlib
matplotlib.use("TkAgg")

import matplotlib.pyplot as plt
import tensorflow as tf

# For Live graphs
import matplotlib.animation as animation
from matplotlib import style
import matplotlib.pylab as pylab
params = {'legend.fontsize': 'x-large',
          'figure.figsize': (15, 5),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)

dataframe = pd.read_csv('kddcup.data.corrected')

# Data Selection
dataframe = dataframe[0:494021]


inputX =  dataframe.loc[0:455216,[
						  'protocol_type',
						  'service',
						  'land',
						  'count',
						  'srv_count',
						  'urgent',
						  'same_srv_rate',
						  'diff_srv_rate',
						  'srv_diff_host_rate']].as_matrix()


# Converts a given service name to a data point numerical value which is consistent throughout the model.
def convert_service_to_data_point(s_name):
	
	services = ['http', 'smtp', 'finger', 'domain_u', 'auth', 'telnet', 'ftp', 'eco_i', 'ntp_u', 'ecr_i', 'other', 'private', 'pop_3', 'ftp_data', 'rje', 'time', 'mtp', 'link', 'remote_job', 'gopher', 'ssh', 'name', 'whois', 'domain', 'login', 'imap4', 'daytime', 'ctf', 'nntp', 'shell', 'IRC', 'nnsp', 'http_443', 'exec', 'printer', 'efs', 'courier', 'uucp', 'klogin', 'kshell', 'echo', 'discard', 'systat', 'supdup', 'iso_tsap', 'hostnames', 'csnet_ns', 'pop_2', 'sunrpc', 'uucp_path', 'netbios_ns', 'netbios_ssn', 'netbios_dgm', 'sql_net', 'vmnet', 'bgp', 'Z39_50', 'ldap', 'netstat', 'urh_i', 'X11', 'urp_i', 'pm_dump', 'tftp_u', 'tim_i', 'red_i']

	if s_name in services:
		# Assumed port number for 'other'
		return services.index(s_name)
	else:
		return services.index('other')


# Convert a protocol to data point 
def convert_protocol_to_data_point(proto):
	if proto == 'tcp':
		return 6
	elif proto == 'udp':
		return 17
	elif proto == 'icmp':
		return 1


def preprocess_input(input_x):
	for x in input_x:
		#  Convert service names for each packet into data points
		x[1] = convert_service_to_data_point(x[1])
		# Convert protocol for each packet into data points
		x[0] = convert_protocol_to_data_point(x[0])
	return input_x
		

# ============================
# Data Preprocessing - inputX
# ============================
for x in inputX:
	#  Convert service names for each packet into data points
	x[1] = convert_service_to_data_point(x[1])
	# Convert protocol for each packet into data points
	x[0] = convert_protocol_to_data_point(x[0])


# ============================
# Data Preprocessing - InputY
# ============================

attacks = [
	'back',
	'buffer_overflow',
	'ftp_write',
	'guess_passwd',
	'imap',
	'ipsweep',
	'land',
	'loadmodule',
	'multihop',
	'neptune',
	'nmap',
	'normal',
	'perl',
	'phf',
	'pod',
	'portsweep',
	'rootkit',
	'satan',
	'smurf'
]
attack_ids = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
attack_dict = dict(zip(attacks, attack_ids))

dataframe['label']=dataframe['label'].map(lambda x : str(x)[:-1])
dataframe['label'] = dataframe['label'].map(attack_dict)

# Integer labels
tempInputY = dataframe['label']

# Input of labels, encoded as one hot input
inputY = []

for inY in tempInputY:
	lst = []
	for y_id in range(0, len(attacks)):
		if inY == y_id:
			lst.append(1)
		else:
			lst.append(0)
	inputY.append(lst)
# Convert one hot list to one hot array of labels
inputY = np.array(inputY)

# ======================
# Hyperparameters Setup
# ======================

parameters = {
	'learning_rate': 0.001,
	'training_epochs': 250,
	'display_steps': 1,
	'n_features': inputX[0].size,
	'n_classes': inputY[0].size
}

# ========================
# CREATE COMPUTATION MODEL
# ========================


x = tf.placeholder(tf.float32, [None, parameters['n_features']])

# Initialize weights
W = tf.Variable(tf.zeros([parameters['n_features'], parameters['n_classes']]))

# Initialize biases
b = tf.Variable(tf.zeros([parameters['n_classes']]))

# Aply softmax activation function
y = tf.nn.softmax(tf.matmul(x, W) + b)

y_ = tf.placeholder(tf.float32, [None, parameters['n_classes']])

xpoints = []
ypoints = []

def train_and_save_model(inputX, inputY, parameters):
	# cost = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))
	cost = tf.reduce_sum(tf.pow(y_ - y, 2)) / (2 * parameters['n_classes'])

	train_step = tf.train.AdamOptimizer(parameters['learning_rate']).minimize(cost)
	# Initiate tf saver
	saver = tf.train.Saver()
	# Model Path
	model_path = "./tmp/model.ckpt"

	# Starting Session
	sess = tf.InteractiveSession()
	tf.global_variables_initializer().run()

	for i in range(parameters['training_epochs']):
		sess.run(train_step, feed_dict={x:inputX, y_:inputY})
		cc = sess.run(cost, feed_dict={x:inputX, y_:inputY})
		if i % parameters['display_steps'] == 0:
			correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
			accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
			accuracy_percentage = sess.run(accuracy, feed_dict={x: inputX, y_: inputY})
			print("Training Step: ", "%04d" % (i), 'cost=', "{:.9f}".format(cc), "Accuracy: ",accuracy_percentage )
			xpoints.append(i)
			ypoints.append(accuracy_percentage * 100)

	# xpoints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249]
	# ypoints =[56.837868690490723, 56.837868690490723, 56.837868690490723, 56.837868690490723, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.837666034698486, 56.838071346282959, 56.838274002075195, 56.843739748001099, 56.84657096862793, 56.849408149719238, 56.858110427856445, 56.860131025314331, 56.866204738616943, 57.234406471252441, 58.954983949661255, 59.47338342666626, 59.476619958877563, 59.539979696273804, 59.54585075378418, 59.807580709457397, 59.816282987594604, 59.839159250259399, 59.849077463150024, 60.051900148391724, 60.100078582763672, 60.117483139038086, 60.152703523635864, 60.198456048965454, 60.286098718643188, 60.359174013137817, 60.451680421829224, 60.587304830551147, 61.044973134994507, 62.250590324401855, 63.784939050674438, 67.225277423858643, 69.809383153915405, 74.22599196434021, 78.446662425994873, 79.930609464645386, 80.087488889694214, 80.115824937820435, 80.13647198677063, 80.142545700073242, 80.147606134414673, 80.157727003097534, 80.168253183364868, 80.170679092407227, 80.18343448638916, 80.194771289825439, 80.202460289001465, 80.20327091217041, 80.203878879547119, 80.212581157684326, 80.2265465259552, 80.245578289031982, 80.247598886489868, 80.292540788650513, 80.311363935470581, 80.323308706283569, 80.3261399269104, 80.327761173248291, 80.33747673034668, 80.352860689163208, 80.378365516662598, 80.390304327011108, 80.396378040313721, 80.418646335601807, 80.428564548492432, 80.445569753646851, 80.4473876953125, 80.462163686752319, 80.47107458114624, 80.501639842987061, 80.51074743270874, 80.528157949447632, 80.550622940063477, 80.562770366668701, 80.5888831615448, 80.59961199760437, 80.606693029403687, 80.63017725944519, 80.649811029434204, 80.661553144454956, 80.67328929901123, 80.680173635482788, 80.694341659545898, 80.712157487869263, 80.725312232971191, 80.75365424156189, 80.7655930519104, 80.779969692230225, 80.787050724029541, 80.800414085388184, 80.827939510345459, 80.842918157577515, 80.861341953277588, 80.967408418655396, 80.980360507965088, 80.989676713943481, 81.006878614425659, 81.018620729446411, 82.757413387298584, 82.783728837966919, 82.792836427688599, 82.836359739303589, 82.870972156524658, 82.900118827819824, 82.908618450164795, 82.929062843322754, 82.938176393508911, 82.950317859649658, 82.984936237335205, 83.142417669296265, 83.155977725982666, 83.176219463348389, 83.186948299407959, 83.198285102844238, 83.219337463378906, 83.253341913223267, 83.265691995620728, 83.275002241134644, 84.411388635635376, 84.424346685409546, 84.438717365264893, 84.456735849380493, 84.467661380767822, 84.47798490524292, 84.513008594512939, 85.179984569549561, 85.220468044281006, 85.237669944763184, 85.261762142181396, 85.375118255615234, 85.398596525192261, 85.411751270294189, 85.439079999923706, 85.477948188781738, 85.494542121887207, 85.507500171661377, 85.630166530609131, 85.655874013900757, 85.675102472305298, 85.690486431121826, 85.729551315307617, 85.785019397735596, 85.802221298217773, 86.329931020736694, 86.378312110900879, 86.501181125640869, 86.517781019210815, 86.544704437255859, 86.615753173828125, 86.640852689743042, 86.653602123260498, 86.757850646972656, 86.889016628265381, 86.923027038574219, 86.935776472091675, 86.950552463531494, 87.023425102233887, 87.113708257675171, 87.627649307250977, 87.659633159637451, 88.443201780319214, 88.4654700756073, 89.663189649581909, 89.689302444458008, 89.861363172531128, 90.234625339508057, 90.26215672492981, 90.426522493362427, 90.448582172393799, 90.464776754379272, 90.509915351867676, 90.957063436508179, 91.179120540618896, 91.201388835906982, 91.224664449691772, 91.237419843673706, 91.330122947692871, 91.37992262840271, 91.407448053359985, 91.469794511795044, 91.491657495498657, 91.529107093811035, 91.5446937084198, 91.968357563018799, 91.979289054870605, 92.018759250640869, 92.077463865280151, 92.111873626708984, 92.140817642211914, 92.258423566818237, 92.350125312805176, 92.367327213287354, 92.395669221878052, 92.810022830963135, 92.83633828163147, 92.911839485168457, 92.963862419128418, 92.984306812286377, 93.006974458694458, 93.041390180587769, 93.086731433868408, 93.098068237304688, 93.42922568321228, 93.504524230957031, 93.516874313354492, 93.52719783782959, 93.552905321121216, 93.580234050750732, 93.595618009567261, 93.640351295471191, 93.982440233230591, 94.036084413528442, 94.046813249588013, 94.0804123878479, 94.092559814453125, 94.101870059967041, 94.130408763885498, 94.141137599945068, 94.445174932479858, 94.471490383148193, 94.483637809753418, 94.491124153137207, 94.512176513671875, 94.522500038146973]
	# x2points = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249]
	# y2points = [73.426836729049683, 71.82164192199707, 71.596753597259521, 71.612542867660522, 71.710312366485596, 71.862733364105225, 72.065967321395874, 72.285795211791992, 72.532546520233154, 72.817349433898926, 72.596913576126099, 72.385585308074951, 72.219198942184448, 72.10766077041626, 72.066569328308105, 72.051185369491577, 72.047543525695801, 72.053617238998413, 72.082763910293579, 72.109484672546387, 72.139847278594971, 72.167176008224487, 72.191464900970459, 72.209280729293823, 72.219198942184448, 72.227495908737183, 72.230130434036255, 72.229117155075073, 72.227495908737183, 72.224056720733643, 72.213733196258545, 72.204017639160156, 72.193694114685059, 72.180533409118652, 72.166770696640015, 72.149562835693359, 72.129321098327637, 72.105437517166138, 72.085195779800415, 72.053819894790649, 72.028112411499023, 71.995115280151367, 71.962529420852661, 71.931356191635132, 71.896135807037354, 71.861118078231812, 71.835207939147949, 71.807068586349487, 71.780955791473389, 71.756464242935181, 71.731770038604736, 71.705454587936401, 71.685212850570679, 71.664363145828247, 71.640276908874512, 71.623879671096802, 71.614569425582886, 71.5923011302948, 71.575701236724854, 71.565580368041992, 71.557283401489258, 71.539264917373657, 71.526515483856201, 71.511536836624146, 71.49655818939209, 71.473073959350586, 71.459108591079712, 71.443116664886475, 71.429556608200073, 71.40546441078186, 71.368223428726196, 71.339678764343262, 71.31195068359375, 71.288871765136719, 71.272677183151245, 71.258711814880371, 71.248996257781982, 71.242314577102661, 71.237051486968994, 71.229970455169678, 71.228146553039551, 71.228349208831787, 71.22875452041626, 71.230572462081909, 71.236848831176758, 71.242111921310425, 71.248793601989746, 71.260738372802734, 71.274501085281372, 71.287047863006592, 71.30243182182312, 71.320044994354248, 71.338868141174316, 71.361744403839111, 71.386843919754028, 71.403849124908447, 71.41498327255249, 71.423280239105225, 71.434009075164795, 71.442711353302002, 71.451616287231445, 71.45809531211853, 71.465587615966797, 71.475505828857422, 71.486836671829224, 71.497970819473267, 71.508091688156128, 71.515989303588867, 71.522063016891479, 71.529346704483032, 71.534204483032227, 71.538251638412476, 71.547162532806396, 71.55383825302124, 71.557283401489258, 71.563959121704102, 71.570640802383423, 71.578943729400635, 71.590679883956909, 71.598982810974121, 71.603232622146606, 71.608293056488037, 71.614772081375122, 71.624284982681274, 71.637237071990967, 71.646547317504883, 71.654850244522095, 71.664363145828247, 71.677112579345703, 71.69533371925354, 71.706873178482056, 71.719014644622803, 71.7315673828125, 71.748971939086914, 71.773874759674072, 71.790468692779541, 71.803426742553711, 71.820425987243652, 71.839660406112671, 71.857267618179321, 71.874678134918213, 71.897143125534058, 71.922850608825684, 71.948361396789551, 71.974873542785645, 71.997547149658203, 72.024065256118774, 72.057259082794189, 72.086411714553833, 72.112524509429932, 72.142887115478516, 72.1732497215271, 72.198957204818726, 72.239440679550171, 72.271424531936646, 72.30522632598877, 72.339838743209839, 72.374856472015381, 72.416150569915771, 72.454410791397095, 72.492259740829468, 72.530114650726318, 72.571206092834473, 72.614729404449463, 72.649341821670532, 72.686386108398438, 72.726058959960938, 72.767961025238037, 72.820585966110229, 72.865122556686401, 72.913700342178345, 72.959041595458984, 73.207211494445801, 73.256599903106689, 73.302149772644043, 73.357206583023071, 73.408013582229614, 73.458820581436157, 73.519545793533325, 73.582702875137329, 73.66144061088562, 73.788970708847046, 74.137133359909058, 74.485296010971069, 74.842971563339233, 75.592738389968872, 76.486831903457642, 77.466946840286255, 78.113275766372681, 79.159188270568848, 80.016231536865234, 81.032383441925049, 81.939429044723511, 82.870364189147949, 83.827000856399536, 84.807932376861572, 85.813355445861816, 86.708259582519531, 87.831288576126099, 88.803106546401978, 89.781808853149414, 90.540480613708496, 91.199767589569092, 91.794884204864502, 92.221587896347046, 92.645251750946045, 93.048268556594849, 93.3624267578125, 93.662619590759277, 93.967866897583008, 94.283443689346313, 94.529992341995239, 94.710749387741089, 94.864386320114136, 94.964182376861572, 95.062965154647827, 95.132189989089966, 95.201420783996582, 95.257288217544556, 95.302629470825195, 95.333397388458252, 95.358496904373169, 95.376914739608765, 95.387238264083862, 95.402622222900391, 95.417201519012451, 95.426511764526367, 95.434200763702393, 95.439869165420532, 95.445740222930908, 95.450598001480103, 95.456063747406006, 95.462137460708618, 95.467400550842285, 95.473271608352661, 95.47913670539856, 95.486831665039062, 95.491689443588257, 95.507478713989258, 95.501202344894409, 95.507681369781494, 95.511525869369507, 95.511728525161743, 95.511728525161743, 95.512336492538452, 95.511525869369507, 95.512741804122925, 95.515167713165283, 95.517599582672119, 95.520633459091187] 

	# xmlp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249] 
	# ymlp = [0.0392544956412, 0.0415271235397, 0.0520638539456, 7.94428363442, 10.9912589192, 57.270860672, 57.3770582676, 58.5234940052, 58.9209973812, 59.0873122215, 59.1664433479, 59.2656075954, 60.4248583317, 60.9444618225, 61.794424057, 63.0094587803, 63.8183057308, 64.4786059856, 65.1306450367, 65.6351685524, 66.4365828037, 66.9433772564, 68.5431003571, 70.134973526, 73.0495154858, 74.8440682888, 75.668823719, 75.5890727043, 75.4979610443, 75.1729786396, 75.1541793346, 75.1704990864, 75.2045869827, 75.0510811806, 74.3007004261, 74.7862160206, 75.4318535328, 78.5604357719, 87.5563263893, 95.7977056503, 97.8550493717, 97.5339889526, 97.3895788193, 97.3542451859, 97.3333775997, 97.2358644009, 95.9272444248, 94.3153321743, 94.187027216, 94.1808283329, 94.2930161953, 94.9946403503, 95.785099268, 96.2266087532, 96.2080180645, 96.1823999882, 96.1960315704, 96.2480962276, 96.1956202984, 95.7762181759, 95.368796587, 94.8661327362, 94.3872272968, 93.6959326267, 93.7928318977, 94.1281497478, 94.8938190937, 94.2810356617, 94.1157519817, 94.0930247307, 93.9979851246, 93.867623806, 93.6841607094, 93.6593651772, 93.673825264, 93.814522028, 92.8670465946, 91.9284522533, 92.6164388657, 93.6353981495, 93.9932346344, 94.0035641193, 94.093644619, 94.1845476627, 94.3983852863, 94.5064365864, 94.0169930458, 93.7579154968, 93.4099972248, 93.2595908642, 93.3083474636, 93.7506854534, 93.9366281033, 93.9099729061, 93.8461363316, 93.2104170322, 93.3232247829, 93.8802242279, 93.4695005417, 93.4106171131, 93.1302547455, 93.0073261261, 93.6025500298, 93.4385061264, 93.7701046467, 94.3616092205, 95.120871067, 95.9375739098, 96.7203915119, 96.7610895634, 96.7935264111, 96.5296983719, 96.1751639843, 96.0522353649, 95.8309650421, 96.0518240929, 96.569365263, 96.6232895851, 95.9772408009, 95.0946331024, 94.4690406322, 94.1822767258, 94.1376507282, 94.5585012436, 94.5415616035, 95.7629919052, 96.2404549122, 96.5484976768, 96.7984855175, 96.9559192657, 96.3146209717, 95.3047513962, 94.2382693291, 93.8422083855, 93.7246501446, 93.8539862633, 94.5824682713, 94.8388576508, 94.7991907597, 95.04814744, 95.4927563667, 96.2071895599, 96.729272604, 96.4235007763, 96.3220596313, 96.6144025326, 96.5344488621, 96.5007722378, 96.3371396065, 96.1600840092, 96.053892374, 96.0925221443, 96.4495360851, 96.9294726849, 96.6460108757, 96.5210199356, 96.2150394917, 95.8375751972, 95.5150723457, 95.6262230873, 95.8427429199, 96.1053371429, 96.5051114559, 96.850758791, 96.8071639538, 96.547049284, 96.3660657406, 96.2580144405, 96.4582085609, 96.6509699821, 96.8991041183, 97.1497118473, 97.2635507584, 96.8724489212, 96.7255532742, 96.8205928802, 96.8939363956, 96.9796776772, 97.2544550896, 97.1352458, 96.7230737209, 96.6387808323, 96.6703951359, 96.7503488064, 96.2429344654, 95.9231078625, 95.617544651, 95.9733128548, 96.2809443474, 96.4330077171, 96.7786550522, 96.7689394951, 96.9645917416, 97.2821414471, 97.1216142178, 97.3466038704, 97.3375141621, 97.6098120213, 97.5726246834, 97.4558949471, 97.2763597965, 97.2604513168, 97.1474349499, 96.6747283936, 96.613162756, 96.7323720455, 97.1083879471, 96.6972529888, 95.816296339, 94.9706733227, 94.7258472443, 94.4611907005, 95.9567844868, 96.5813457966, 97.2377240658, 97.383582592, 97.3633348942, 97.7360486984, 97.8862464428, 97.9058742523, 97.8129029274, 97.6947307587, 96.9939291477, 95.7902669907, 95.5061852932, 95.6820070744, 96.1497545242, 96.227645874, 96.2222695351, 96.2294995785, 96.3420987129, 96.4662671089, 96.6156423092, 96.7584073544, 96.9220340252, 97.1354544163, 96.8433201313, 96.9241023064, 97.0230638981, 97.1360743046, 96.3964402676, 95.9098875523, 95.6386208534, 95.5671370029, 95.4504013062, 95.3997850418, 96.0047185421, 96.6780364513, 98.0035960674, 97.8996753693]
	

	print("Optimization Finished!")
	print(xpoints, ypoints)
	
	plt.plot(xpoints, ypoints, label='SF 1')
	# plt.plot(x2points, y2points,  label='SF 2')
	# plt.plot(xmlp, ymlp, label= 'MLP')

	plt.xlabel('Epochs')
	plt.ylabel('Accuracy Percentage')
	plt.title("Model Accuracy vs No of Epochs")
	plt.legend()
	plt.show()
	training_cost = sess.run(cost, feed_dict={x:inputX, y_:inputY})
	print("Training cost= ", training_cost, " W=", sess.run(W), " b=", sess.run(b))

	save_path = saver.save(sess, model_path)
	print("Model saved in file: %s" % save_path)
	return save_path


def predict_class(input_x, input_y, save_path):
	sess = tf.InteractiveSession()
	saver = tf.train.Saver()

	saver.restore(sess, save_path)
	print("Model restored from file: %s" % save_path)

	feed_dict = {x: input_x}
	classification = list(sess.run(y, feed_dict))
	# print(classification)
	predicted_probabilities = []
	for c in classification:
		c = list(c)
		if attacks[c.index(max(c))] == 'normal':
			predicted_probabilities.append(0)
		else:
			predicted_probabilities.append(max(c))

	print(predicted_probabilities)
	original_labels = []

	for ipx in input_y:
		if ipx[0] == 11:
			original_labels.append(0)
		else:
			original_labels.append(1)
	
	print(original_labels)
	generate_roc_curve(predicted_probabilities, original_labels)


def unison_shuffled_copies(a, b):
	randomize = np.arange(len(a))
	np.random.shuffle(randomize)
	a = a[randomize]
	b = b[randomize]
	return a, b



def generate_roc_curve(predicted_probabilities, original_labels):
	score = np.array(predicted_probabilities)
	y = np.array(original_labels)

	
	roc_x = []
	roc_y = []
	min_score = min(score)
	max_score = max(score)
	thr = np.linspace(min_score, max_score, 30)
	FP=0
	TP=0
	N = sum(y)
	P = len(y) - N

	for (i, T) in enumerate(thr):
	    for i in range(0, len(score)):
	        if (score[i] > T):
	            if (y[i]==1):
	                TP = TP + 1
	            if (y[i]==0):
	                FP = FP + 1
	    roc_x.append(FP/float(N))
	    roc_y.append(TP/float(P))
	    FP=0
	    TP=0

	plt.plot(roc_x, roc_y)
	plt.show()


def main():
	# a, b = unison_shuffled_copies(inputX, inputY)
	# print("Data Shuffling Completed!")
	# save_path = train_and_save_model(a, b, parameters)
	# print(predict_x)


	# PREDICT AND GENERATE ROC CURVES
	
	predict_x = dataframe.loc[0:4898432,[
						  'protocol_type',
						  'service',
						  'land',
						  'count',
						  'srv_count',
						  'urgent',
						  'same_srv_rate',
						  'diff_srv_rate',
						  'srv_diff_host_rate']].as_matrix()
	predict_x = preprocess_input(predict_x)
	predict_y = dataframe.loc[0:4898432,['label']].as_matrix()
	a, b = unison_shuffled_copies(predict_x, predict_y)
	predict_class(a, b, './tmp/model.ckpt')
if __name__ == '__main__':
	main()